# This workflow will run tests using node and then publish a package to GitHub Packages when a release is created
# For more information see: https://docs.github.com/en/actions/publishing-packages/publishing-nodejs-packages

name: Publish JS Recon

on:
  release:
    types: [created]

jobs:
  version_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check version mismatch
        run: |
          echo "[i] Checking if the version in the CHANGELOG.md, package.json, and Github release version matches"
          PACKAGE_JSON_VERSION=$(cat package.json | jq ".version" -r)
          CHANGELOG_VERSION=$(cat CHANGELOG.md | grep -E "^## [0-9]+\.[0-9]+\.[0-9]+(-(alpha|beta)(\.[0-9]+)?)?" | head -n 1 | sed -E 's/^## ([0-9]+\.[0-9]+\.[0-9]+(-(alpha|beta)(\.[0-9]+)?)?).*/\1/')
          GITHUB_RELEASE_VERSION=$(echo $GITHUB_RELEASE_VERSION_RAW | sed -E 's/^[[:space:]]*v//')
          GLOBALS_FILE_VERSION=$(grep -E '^const version =.+' src/globalConfig.ts | sed -E 's/^const version = "(.*)";/\1/')
          if [[ "$PACKAGE_JSON_VERSION" != "$CHANGELOG_VERSION" ]]; then
            echo "Version number mismatch between PACKAGE_JSON_VERSION and CHANGELOG_VERSION"
            exit 1
          elif [[ "$PACKAGE_JSON_VERSION" != "$GITHUB_RELEASE_VERSION" ]]; then
            echo "Version number mismatch between PACKAGE_JSON_VERSION and GITHUB_RELEASE_VERSION"
            exit 1
          elif [[ "$PACKAGE_JSON_VERSION" != "$GLOBALS_FILE_VERSION" ]]; then
            echo "Version number mismatch between PACKAGE_JSON_VERSION and GLOBALS_FILE_VERSION"
            exit 1
          else
            echo "[âœ“] Version matches"
          fi
        env:
          GITHUB_RELEASE_VERSION_RAW: ${{ github.event.release.tag_name }}


  build:
    needs: version_check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - run: npm ci
      - run: npm run build
      - run: npm run test


  publish-npm:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: https://registry.npmjs.org/
      - run: npm ci
      - run: npm run build
      - name: Publish to npm
        run: |
          TAG="latest"
          [[ "$VERSION" == *"beta"* ]] && TAG="beta"
          [[ "$VERSION" == *"alpha"* ]] && TAG="alpha"
          npm publish --tag $TAG
        env:
          NODE_AUTH_TOKEN: ${{secrets.npm_token}}
          VERSION: ${{ github.event.release.tag_name }}


  publish-docker:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build and push to dockerhub
        run: |
          # login to docker
          echo $DOCKER_SECRET | docker login -u shriyanss --password-stdin

          # build the image
          docker build -t shriyanss/js-recon:$VERSION .

          # check if it is alpha or beta. default to latest
          TAG="latest"
          [[ "$VERSION" == *"beta"* ]] && TAG="beta"
          [[ "$VERSION" == *"alpha"* ]] && TAG="alpha"

          # tag again with whatever has been set
          docker tag shriyanss/js-recon:$VERSION shriyanss/js-recon:$TAG

          # push images with both tags
          docker push shriyanss/js-recon:$VERSION
          docker push shriyanss/js-recon:$TAG
          
        env:
          DOCKER_SECRET: ${{ secrets.DOCKER_SECRET }}
          VERSION: ${{ github.event.release.tag_name }}


  publish-ghcr:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push to github container registry
        run: |
          # build the image
          docker build -t ghcr.io/shriyanss/js-recon:$VERSION .

          # check if it is alpha or beta. default to latest
          TAG="latest"
          [[ "$VERSION" == *"beta"* ]] && TAG="beta"
          [[ "$VERSION" == *"alpha"* ]] && TAG="alpha"

          # tag again with whatever has been set
          docker tag ghcr.io/shriyanss/js-recon:$VERSION ghcr.io/shriyanss/js-recon:$TAG

          # push images with both tags
          docker push ghcr.io/shriyanss/js-recon:$VERSION
          docker push ghcr.io/shriyanss/js-recon:$TAG
          
        env:
          VERSION: ${{ github.event.release.tag_name }}
  
  merge_main_and_dev:
    needs:
      - publish-npm
      - publish-docker
      - publish-ghcr
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.DEPLOY_KEY }}
          fetch-depth: 0
      - name: Merge main and dev
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git fetch origin main:main
          git fetch origin dev:dev
          git checkout dev
          git merge --no-ff -m "chore: merge changes after release $VERSION" main -X theirs || (git status && git diff && exit 0)
          git push origin dev
        env:
          VERSION: ${{ github.event.release.tag_name }}
